#%RAML 0.8
title: max-alpha-ws
version: v1
baseUri: http://localhost:3000/api/v1
securitySchemes:
  - jwt:
      description: JSON Web Token. Can be passed in the header or body
      type: x-custom
      describedBy:
        headers:
          token:
            description: JSON Web Token
            type: string
            example: |
              eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imphc29uIiwiaWF0IjoxNDUzNTE0NzAwLCJleHAiOjE0NTM2ODc1MDB9.HuO7rqxkI7KnHTmCdVBsd2pSwybWl6fTh73LRhOnS8E
resourceTypes:
  - collection:
      usage: This resourceType should be used for any collection of items
      description: The collection of <<resourcePathName>>
      get?:
        description: Get all <<resourcePathName>>, optionally filtered
      post?:
        description: Create a new <<resourcePathName | !singularize>>
      put?:
        description: Update an existing <<resourcePathName | !singularize>>
      delete?:
        responses:
          204:
            description: delete a <<resourcePathName | !singularize>>
          404:
            description: <<resourcePathName | !singularize>> not found
traits:
  - secured:
      description: Some requests require authentication
      queryParameters:
        token:
          description: A JSON Web Token is required
          example: token=abasf
/authenticate:
  /login:
    post:
      description: login endpoint
      body:
        application/json:
          formParameters:
            username:
              type: string
            password:
              type: string
      responses:
        200:
          #Todo
          body:
            application/json:
        400:
          #Todo
          description: bad username or password
          body:
            application/json:
/users:
  type: collection
  get:
    queryParameters:
      userId:
        type: string
        required: false
      username:
        type: string
        required: false
    responses:
      200:
        #Todo
        body:
          application/json:
      404:
        description: User not found
        body:
          application/json:
  post:
    body:
      application/json:
        formParameters:
          username:
            type: string
          password:
            type: string
    responses:
      200:
        #Todo
        body:
          application/json:
      409:
        #Todo
        description: username already taken
        body:
          application/json:
  put:
    is: [secured]
    body:
      application/json:
        formParameters:
          username:
            type: string
            required: false
          password:
            type: string
            required: false
    responses:
      200:
        #Todo
        body:
          application/json:
      400:
        #Todo
        description: Bad update information
        body:
          application/json:
  delete:
    #todo
/decks:
  type: collection
  get:
    queryParameters:
      deckId:
        type: string
        required: false
      userId:
        type: string
        required: false
    responses:
      200:
        #Todo
        body:
          application/json:
  post:
    is: [secured]
    body:
      application/json:
        formParameters:
          name:
            type: string
            required: true
          mainCards:
            type: string
            required: true
          structures:
            type: string
            required: true
    responses:
      200:
        #Todo
        body:
          application/json:
      400:
        #Todo
        description: Invalid Input
        body:
          application/json:
  put:
    is: [secured]
    body:
      application/json:
        formParameters:
          id:
            type: string
            required: true
          name:
            type: string
            required: false
          mainCards:
            type: string
            required: false
          structures:
            type: string
            required: false
    responses:
      200:
        #Todo
        body:
          application/json:
      400:
        #Todo
        body:
          application/json:
  delete:
    #Todo
    body:
      application/json:
        formParameters:
          id:
            type: string
/cards:
  type: collection
  get:
    #Todo
    queryParameters:
      deckId:
        type: string
        required: false
      userId:
        type: string
        required: false
    responses:
      200:
        body:
          application/json:
      400:
        description: Invalid deckId or userId
        body:
          application/json:
